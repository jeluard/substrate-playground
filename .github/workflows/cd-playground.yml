name: Continuous Deployment Playground

on:
  push:
    branches:
      - develop
      - master
    paths-ignore:
      - 'README.md'
      - '.github/workflows/book.yml'
      - '.github/workflows/release.yml'
      - '.github/workflows/ci-**'
      - '.github/workflows/cd-base-templates.yml'
      - '.github/workflows/cd-templates.yml'
      - '.github/workflows/event-*'
      - '.github/workflows/templates/*'
      - '.github/workflow-templates/*'
      - 'docs/**'
      - 'conf/k8s/overlays/**/templates/**'
      - 'conf/k8s/overlays/production'
      - 'conf/k8s/overlays/dev'
      - 'templates/**'

env:
  DOCKER_BUILDKIT: 1

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Set environment
        id: env
        run: |
          echo ::set-output name=sha::sha-${GITHUB_SHA::7}
          PROJECT=`grep PROJECT .env | cut -d '=' -f2`
          ZONE=`grep ZONE .env | cut -d '=' -f2`
          echo ::set-output name=project::$( echo ${PROJECT} )
          echo ::set-output name=zone::$( echo ${ZONE} )
          if [[ $GITHUB_REF == 'refs/heads/master' ]]; then
              echo ::set-output name=environment::production
              echo ::set-output name=domain::playground
              echo ::set-output name=cluster::substrate-playground
          else if [[ $GITHUB_REF == 'refs/heads/develop' ]]; then
              echo ::set-output name=environment::staging
              echo ::set-output name=domain::playground-staging
              echo ::set-output name=cluster::susbtrate-playground-staging
          fi

      - uses: actions/checkout@v2
      - uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
        with:
          service_account_key: ${{ secrets.GCLOUD_KEY }}
          export_default_credentials: true
          project_id: ${{ steps.env.outputs.project }}
      - run: gcloud --quiet auth configure-docker
      - run: gcloud container clusters get-credentials "${{ steps.env.outputs.cluster }}" --zone "${{ steps.env.outputs.zone }}"

      - name: Prepare labels
        id: prep
        run: |
            VERSION=edge
            if [[ $GITHUB_REF == refs/tags/* ]]; then
              VERSION=${GITHUB_REF#refs/tags/}
            elif [[ $GITHUB_REF == refs/heads/* ]]; then
              VERSION=$(echo ${GITHUB_REF#refs/heads/} | sed -r 's#/+#-#g')
            elif [[ $GITHUB_REF == refs/pull/* ]]; then
              VERSION=pr-${{ github.event.number }}
            fi
            echo ::set-output name=version::${VERSION}
            echo ::set-output name=created::$(date -u +'%Y-%m-%dT%H:%M:%SZ')

      - name: Prepare labels paritytech/substrate-playground-backend-api
        id: prep-api
        run: |
            VERSION=edge
            if [[ $GITHUB_REF == refs/tags/* ]]; then
              VERSION=${GITHUB_REF#refs/tags/}
            elif [[ $GITHUB_REF == refs/heads/* ]]; then
              VERSION=$(echo ${GITHUB_REF#refs/heads/} | sed -r 's#/+#-#g')
            elif [[ $GITHUB_REF == refs/pull/* ]]; then
              VERSION=pr-${{ github.event.number }}
            fi
            DOCKER_IMAGE=paritytech/substrate-playground-backend-api
            TAGS="${DOCKER_IMAGE}:latest,${DOCKER_IMAGE}:${VERSION},${DOCKER_IMAGE}:sha-${GITHUB_SHA::7}"
            echo ::set-output name=tags::${TAGS}

      - name: Prepare labels paritytech/substrate-playground-backend-ui
        id: prep-ui
        run: |
            VERSION=edge
            if [[ $GITHUB_REF == refs/tags/* ]]; then
              VERSION=${GITHUB_REF#refs/tags/}
            elif [[ $GITHUB_REF == refs/heads/* ]]; then
              VERSION=$(echo ${GITHUB_REF#refs/heads/} | sed -r 's#/+#-#g')
            elif [[ $GITHUB_REF == refs/pull/* ]]; then
              VERSION=pr-${{ github.event.number }}
            fi
            DOCKER_IMAGE=paritytech/substrate-playground-backend-ui
            TAGS="${DOCKER_IMAGE}:latest,${DOCKER_IMAGE}:${VERSION},${DOCKER_IMAGE}:sha-${GITHUB_SHA::7}"
            echo ::set-output name=tags::${TAGS}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - uses: docker/build-push-action@v2
        with:
          context: backend
          file: backend/Dockerfile
          build-args: GITHUB_SHA=${{ steps.env.outputs.sha }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.prep-api.outputs.tags }}
          labels: |
            org.opencontainers.image.source=${{ github.event.repository.clone_url }}
            org.opencontainers.image.created=${{ steps.prep.outputs.created }}
            org.opencontainers.image.revision=${{ github.sha }}

      - uses: docker/build-push-action@v2
        with:
          context: frontend
          file: frontend/Dockerfile
          build-args: GITHUB_SHA=${{ steps.env.outputs.sha }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.prep-ui.outputs.tags }}
          labels: |
            org.opencontainers.image.source=${{ github.event.repository.clone_url }}
            org.opencontainers.image.created=${{ steps.prep.outputs.created }}
            org.opencontainers.image.revision=${{ github.sha }}

      - name: Set up Kustomize
        run: |-
          curl -sfLo kustomize https://github.com/kubernetes-sigs/kustomize/releases/download/kustomize%2Fv3.6.1/kustomize_v3.6.1_linux_amd64.tar.gz
          tar zxvf kustomize*
          chmod u+x ./kustomize  
        working-directory: conf/k8s/overlays/${{ steps.env.outputs.environment }}

      - name: Update version
        run: |-
          ./kustomize edit set image paritytech/substrate-playground-backend-api:${{ steps.env.outputs.sha }}
          ./kustomize edit set image paritytech/substrate-playground-backend-ui:${{ steps.env.outputs.sha }}
        working-directory: conf/k8s/overlays/${{ steps.env.outputs.environment }}

      - uses: EndBug/add-and-commit@v4
        with:
          message: ":bookmark: upon which, hails onto us a new release of Playground"
          add: "conf/k8s/overlays/${{ steps.env.outputs.environment }}/kustomization.yaml"
          tag: ${{ steps.env.outputs.sha }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Deploy on GKE
        run:  |-
          ./kustomize build . | kubectl apply --record -f -
          kubectl get services -o wide
        working-directory: conf/k8s/overlays/${{ steps.env.outputs.environment }}

      - name: Audit URLs using Lighthouse
        uses: treosh/lighthouse-ci-action@v3
        with:
          urls: https://${{ steps.env.outputs.domain }}.substrate.dev/
          uploadArtifacts: true

      - uses: microsoft/playwright-github-action@v1

      - name: Run tests
        run: yarn && yarn test
        working-directory: ./e2e
        continue-on-error: true
        env:
          ENVIRONMENT: ${{ steps.env.outputs.environment }}

      # TODO
      # if not ok, fails and rollback
      # https://learnk8s.io/kubernetes-rollbacks
      # https://medium.com/@copyconstruct/testing-in-production-the-safe-way-18ca102d0ef1
      - if: ${{ failure() }}
        uses: s3krit/matrix-message-action@v0.0.3
        with:
          room_id: ${{ secrets.MATRIX_ROOM_ID }}
          access_token: ${{ secrets.MATRIX_ACCESS_TOKEN }}
          message: "Integration tests failed"
          server: "matrix.parity.io"

      - if: ${{ success() }}
        name: Create Release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ steps.env.outputs.sha }}-${{ steps.env.outputs.environment }}
          release_name: Release ${{ steps.env.outputs.sha }}
          body: |
            Backend release:
            - paritytech/substrate-playground-backend-api:${{ steps.env.outputs.sha }}
            - paritytech/substrate-playground-backend-ui:${{ steps.env.outputs.sha }}
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}