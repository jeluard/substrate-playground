#
# Continuously tests playground source code
#

name: Continuous Integration playground

on:
  push:
    branches:
      - develop
    paths:
      - 'Makefile'
      - '.github/workflows/ci-playground.yml'
      - 'conf/**'
      - 'backend/**'
      - 'frontend/**'
      - 'e2e/**'
      - 'scripts/**'
  pull_request_target:
  # This grants access to secrets even when triggered by dependency bot
  # See https://github.blog/changelog/2021-02-19-github-actions-workflows-triggered-by-dependabot-prs-will-run-with-read-only-permissions/
  # It's safe in our case as all secrets accessed can be leaked without introducing safety risks
    branches:
      - develop
    paths:
      - 'Makefile'
      - '.github/workflows/ci-playground.yml'
      - 'conf/**'
      - 'backend/**'
      - 'frontend/**'
      - 'e2e/**'
      - 'scripts/**'

jobs:

  test-frontend:
      uses: ./.github/workflows/base-ci-node.yml
      with:
        path: client

  test-backend:
    runs-on: ubuntu-latest
    if: "! contains(github.event.head_commit.message, '[CI Skip]')"
    steps:

      - uses: actions/checkout@v3

      # Workaround https://github.com/actions-rs/toolchain/issues/110
      - run: cp backend/rust-toolchain .

      - uses: actions-rs/toolchain@v1.0.7
        with:
          profile: minimal
          override: true
          components: rustfmt, clippy

      - name: Test backend
        uses: actions-rs/cargo@v1
        with:
          command: test
          # Workaround https://github.com/actions-rs/cargo/issues/86
          args: --manifest-path backend/Cargo.toml

      - name: Check format
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          # Workaround https://github.com/actions-rs/cargo/issues/86
          args: --manifest-path backend/Cargo.toml --all -- --check

      - name: Check lints
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          # Workaround https://github.com/actions-rs/cargo/issues/86
          args: --manifest-path backend/Cargo.toml -- -D warnings -A deprecated

  # From https://code.visualstudio.com/docs/remote/devcontainer-cli#_adding-automation
  build-devcontainer:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v3
      - run: |
          set -e

          IMAGE_REPOSITORY="ghcr.io/paritytech/substrate-playground-devcontainer"

          export DOCKER_BUILDKIT=1
          export BUILDKIT_PROGRESS=plain

          # Do the build - update
          npm install -g "@vscode/dev-container-cli@0.224.3"
          devcontainer build --no-cache --image-name "${IMAGE_REPOSITORY}" "."

          # Push image to GitHub Container Registry
          echo "${{ github.token }}" | docker login ghcr.io -u "${{ github.actor }}" --password-stdin
          docker push "${IMAGE_REPOSITORY}"


  docker:
    runs-on: ubuntu-18.04
    if: "! contains(github.event.head_commit.message, '[CI Skip]')"
    steps:

      - uses: actions/checkout@v3

      - name: Install redirection
        run: echo "127.0.0.1 playground-dev.substrate.test" | sudo tee -a /etc/hosts

      - uses: docker/setup-buildx-action@v2
        with:
          install: true

      - name: Build backend images
        run: make build-backend-docker-images

      - name: Show images
        run: docker images

      - uses: AbsaOSS/k3d-action@v2
        with:
          cluster-name: "pg-cluster"
          args: >-
             --servers 2 --port 80:80@loadbalancer --port 443:443@loadbalancer
             --k3s-arg '--tls-san=127.0.0.1@server:*' --k3s-arg '--no-deploy=traefik@server:*'
             --k3s-node-label "app.playground/pool=default@server:1"
             --k3s-node-label "app.playground/pool-type=user@server:1"
             --k3s-arg '--node-taint=app.playground/pool-type=user:NoExecute@server:1'

      - name: Set environment
        id: env
        run: |
          echo ::set-output name=sha::sha-${GITHUB_SHA::7}

      - name: Set up Kustomize
        run: |-
          curl -sfLo kustomize https://github.com/kubernetes-sigs/kustomize/releases/download/kustomize%2Fv3.6.1/kustomize_v3.6.1_linux_amd64.tar.gz
          tar zxvf kustomize*
          chmod u+x ./kustomize
        working-directory: conf/k8s/overlays/dev

      - name: Update version
        run: |-
          ./kustomize edit set image paritytech/substrate-playground-backend-api:${{ steps.env.outputs.sha }}
          ./kustomize edit set image paritytech/substrate-playground-backend-ui:${{ steps.env.outputs.sha }}
        working-directory: conf/k8s/overlays/dev

      - name: Load docker images
        run: k3d image import paritytech/substrate-playground-backend-api:${{ steps.env.outputs.sha }} paritytech/substrate-playground-backend-ui:${{ steps.env.outputs.sha }} -c pg-cluster

      - name: Configure playground
        run: |-
          SKIP_ACK=1 USER_ROLES="TestUppercase=super-admin" GH_CLIENT_ID=${{ secrets.GH_CLIENT_ID }} GH_CLIENT_SECRET=${{ secrets.GH_CLIENT_SECRET }} make k8s-setup-env
          openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout tls.key -out tls.crt -subj "/CN=playground-dev.substrate.test"
          kubectl create secret tls playground-tls --save-config --key tls.key --cert tls.crt --dry-run=client -o yaml | kubectl apply -f -

      - name: Deploy playground
        run: SKIP_ACK=1 make k8s-deploy && sleep 300

      - name: Initialize default resources
        run: yarn && yarn build && yarn run:init-default-resources
        working-directory: ./scripts
        env:
          ENV: dev
          ACCESS_TOKEN: ${{ secrets.ACCESS_TOKEN }}

      # Will not run authenticated tests when triggered by PR
      # See https://securitylab.github.com/research/github-actions-preventing-pwn-requests/
      - name: Run e2e tests
        run: yarn && yarn test
        working-directory: ./e2e
        timeout-minutes: 3
        env:
          ENV: dev
          ACCESS_TOKEN: ${{ secrets.ACCESS_TOKEN }}
