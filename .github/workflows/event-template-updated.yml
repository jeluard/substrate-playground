# Build template images from an image and current base templates
# Then sets the new template image id in the right conf file.
# This is turns triggers playground ConfigMap update (see `cd-templates.yml`)
#
# Images are automatically updated on `staging` only.
#
# Must be called with the following payload: `{id: "TEMPLATE_ID"}`
#
# Ideally the repository origin of the event would be matched against the locally configured one to avoid duplicate builds.
# Unfortunately this information is not part of the event payload. Because the original repository is always used to build the image is always safe.

name: Event template-updated

on:
  repository_dispatch:
    types: [template-updated]

env:
  DOCKER_BUILDKIT: 1
  TEMPLATE_ID: ${{ github.event.client_payload.id }}
  TEMPLATE_REF: ${{ github.event.client_payload.ref }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:

      - uses: actions/checkout@v2
        with:
          token: ${{ secrets.PAT_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - name: Install yq
        run: |
          python -m pip install --upgrade pip
          pip install yq

      - name: Set variables
        run: |-
          echo ::set-output name=sha::${GITHUB_SHA::7}
          echo ::set-output name=tag::template-${TEMPLATE_ID}-${GITHUB_SHA::7}
          echo ::set-output name=template::paritytech/substrate-playground-template-${TEMPLATE_ID}
          echo ::set-output name=image::paritytech/substrate-playground-template-${TEMPLATE_ID}:sha-${GITHUB_SHA::7}
          echo ::set-output name=template-theia::paritytech/substrate-playground-template-${TEMPLATE_ID}-theia
          echo ::set-output name=theia-image::paritytech/substrate-playground-template-${TEMPLATE_ID}-theia:sha-${GITHUB_SHA::7}
          FILE=conf/k8s/overlays/staging/templates/$TEMPLATE_ID
          REPOSITORY=`cat $FILE | yq -r .repository`
          echo "::set-output name=repository::$( echo $REPOSITORY )"
          echo "::set-output name=ref::$( echo ${TEMPLATE_REF:-master} )"
        id: env

      - name: Checkout remote repository
        uses: actions/checkout@v2
        with:
          path: template
          repository: ${{ steps.env.outputs.repository }}
          ref: ${{ steps.env.outputs.ref }}
          token: ${{ secrets.PAT_TOKEN }}

      - name: Build and push template Docker image
        uses: docker/build-push-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          dockerfile: ../templates/Dockerfile.template
          repository: ${{ steps.env.outputs.template }}
          tags: latest
          path: template
          add_git_labels: true
          tag_with_ref: true
          tag_with_sha: true
          # TODO set (and keep uptodate) base image version: build_args: BASE_TEMPLATE_VERSION=${{ steps.env.outputs.baseVersion }}

      - name: Build and Push theia template image
        uses: docker/build-push-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          path: templates
          dockerfile: Dockerfile.theia-template
          repository: ${{ steps.env.outputs.template-theia }}
          tags: latest
          add_git_labels: true
          tag_with_ref: true
          tag_with_sha: true
          build_args: TEMPLATE_IMAGE=${{ steps.env.outputs.image }}

      - name: Update template version
        run: |-
          t=$(mktemp)
          cat conf/k8s/overlays/staging/templates/${TEMPLATE_ID} | yq -y ".image = \"${{ steps.env.outputs.theia-image }}\"" > ${t} && mv ${t} conf/k8s/overlays/staging/templates/${TEMPLATE_ID}

# TODO update name, desc, .. from devcontainer.json

      - name: Commit template version update
        uses: EndBug/add-and-commit@v4
        with:
          message: ":bookmark: yee shall thurst into a new version of ${{ env.TEMPLATE_ID }}"
          add: conf/k8s/overlays/staging/templates/${{ env.TEMPLATE_ID }}
          tag: ${{ steps.env.outputs.tag }}
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}

      - name: Create Release for ${{ env.TEMPLATE_ID }}
        uses: actions/create-release@v1
        with:
          tag_name: ${{ steps.env.outputs.tag }}
          release_name: Release ${{ steps.env.outputs.tag }}
          body: |
            Released template for ${{ env.TEMPLATE_ID }} ${{ steps.env.outputs.image }}
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}